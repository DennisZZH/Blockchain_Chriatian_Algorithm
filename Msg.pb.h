// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_2eproto;
class message_t;
class message_tDefaultTypeInternal;
extern message_tDefaultTypeInternal _message_t_default_instance_;
class timestamp_t;
class timestamp_tDefaultTypeInternal;
extern timestamp_tDefaultTypeInternal _timestamp_t_default_instance_;
class transaction_t;
class transaction_tDefaultTypeInternal;
extern transaction_tDefaultTypeInternal _transaction_t_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::message_t* Arena::CreateMaybeMessage<::message_t>(Arena*);
template<> ::timestamp_t* Arena::CreateMaybeMessage<::timestamp_t>(Arena*);
template<> ::transaction_t* Arena::CreateMaybeMessage<::transaction_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class transaction_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transaction_t) */ {
 public:
  inline transaction_t() : transaction_t(nullptr) {}
  virtual ~transaction_t();

  transaction_t(const transaction_t& from);
  transaction_t(transaction_t&& from) noexcept
    : transaction_t() {
    *this = ::std::move(from);
  }

  inline transaction_t& operator=(const transaction_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_t& operator=(transaction_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const transaction_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const transaction_t* internal_default_instance() {
    return reinterpret_cast<const transaction_t*>(
               &_transaction_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(transaction_t& a, transaction_t& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_t* New() const final {
    return CreateMaybeMessage<transaction_t>(nullptr);
  }

  transaction_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const transaction_t& from);
  void MergeFrom(const transaction_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transaction_t";
  }
  protected:
  explicit transaction_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // required int32 sender_id = 1;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 receiver_id = 2;
  bool has_receiver_id() const;
  private:
  bool _internal_has_receiver_id() const;
  public:
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  float amount() const;
  void set_amount(float value);
  private:
  float _internal_amount() const;
  void _internal_set_amount(float value);
  public:

  // @@protoc_insertion_point(class_scope:transaction_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_id_;
  float amount_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class message_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_t) */ {
 public:
  inline message_t() : message_t(nullptr) {}
  virtual ~message_t();

  message_t(const message_t& from);
  message_t(message_t&& from) noexcept
    : message_t() {
    *this = ::std::move(from);
  }

  inline message_t& operator=(const message_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline message_t& operator=(message_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const message_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const message_t* internal_default_instance() {
    return reinterpret_cast<const message_t*>(
               &_message_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(message_t& a, message_t& b) {
    a.Swap(&b);
  }
  inline void Swap(message_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(message_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline message_t* New() const final {
    return CreateMaybeMessage<message_t>(nullptr);
  }

  message_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<message_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const message_t& from);
  void MergeFrom(const message_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(message_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_t";
  }
  protected:
  explicit message_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // required .transaction_t transaction = 3;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::transaction_t& transaction() const;
  ::transaction_t* release_transaction();
  ::transaction_t* mutable_transaction();
  void set_allocated_transaction(::transaction_t* transaction);
  private:
  const ::transaction_t& _internal_transaction() const;
  ::transaction_t* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::transaction_t* transaction);
  ::transaction_t* unsafe_arena_release_transaction();

  // required int32 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::transaction_t* transaction_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  friend struct ::TableStruct_Msg_2eproto;
};
// -------------------------------------------------------------------

class timestamp_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timestamp_t) */ {
 public:
  inline timestamp_t() : timestamp_t(nullptr) {}
  virtual ~timestamp_t();

  timestamp_t(const timestamp_t& from);
  timestamp_t(timestamp_t&& from) noexcept
    : timestamp_t() {
    *this = ::std::move(from);
  }

  inline timestamp_t& operator=(const timestamp_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline timestamp_t& operator=(timestamp_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const timestamp_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const timestamp_t* internal_default_instance() {
    return reinterpret_cast<const timestamp_t*>(
               &_timestamp_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(timestamp_t& a, timestamp_t& b) {
    a.Swap(&b);
  }
  inline void Swap(timestamp_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(timestamp_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline timestamp_t* New() const final {
    return CreateMaybeMessage<timestamp_t>(nullptr);
  }

  timestamp_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<timestamp_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const timestamp_t& from);
  void MergeFrom(const timestamp_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(timestamp_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timestamp_t";
  }
  protected:
  explicit timestamp_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Msg_2eproto);
    return ::descriptor_table_Msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // required int64 seconds = 1;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 nanos = 2;
  bool has_nanos() const;
  private:
  bool _internal_has_nanos() const;
  public:
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::int32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nanos() const;
  void _internal_set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:timestamp_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanos_;
  friend struct ::TableStruct_Msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// transaction_t

// required int32 sender_id = 1;
inline bool transaction_t::_internal_has_sender_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool transaction_t::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void transaction_t::clear_sender_id() {
  sender_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transaction_t::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transaction_t::sender_id() const {
  // @@protoc_insertion_point(field_get:transaction_t.sender_id)
  return _internal_sender_id();
}
inline void transaction_t::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sender_id_ = value;
}
inline void transaction_t::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:transaction_t.sender_id)
}

// required int32 receiver_id = 2;
inline bool transaction_t::_internal_has_receiver_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool transaction_t::has_receiver_id() const {
  return _internal_has_receiver_id();
}
inline void transaction_t::clear_receiver_id() {
  receiver_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transaction_t::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 transaction_t::receiver_id() const {
  // @@protoc_insertion_point(field_get:transaction_t.receiver_id)
  return _internal_receiver_id();
}
inline void transaction_t::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_id_ = value;
}
inline void transaction_t::set_receiver_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:transaction_t.receiver_id)
}

// required float amount = 3;
inline bool transaction_t::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool transaction_t::has_amount() const {
  return _internal_has_amount();
}
inline void transaction_t::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float transaction_t::_internal_amount() const {
  return amount_;
}
inline float transaction_t::amount() const {
  // @@protoc_insertion_point(field_get:transaction_t.amount)
  return _internal_amount();
}
inline void transaction_t::_internal_set_amount(float value) {
  _has_bits_[0] |= 0x00000004u;
  amount_ = value;
}
inline void transaction_t::set_amount(float value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:transaction_t.amount)
}

// -------------------------------------------------------------------

// message_t

// required int32 timestamp = 1;
inline bool message_t::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool message_t::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void message_t::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 message_t::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 message_t::timestamp() const {
  // @@protoc_insertion_point(field_get:message_t.timestamp)
  return _internal_timestamp();
}
inline void message_t::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void message_t::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:message_t.timestamp)
}

// required int32 client_id = 2;
inline bool message_t::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool message_t::has_client_id() const {
  return _internal_has_client_id();
}
inline void message_t::clear_client_id() {
  client_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 message_t::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 message_t::client_id() const {
  // @@protoc_insertion_point(field_get:message_t.client_id)
  return _internal_client_id();
}
inline void message_t::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  client_id_ = value;
}
inline void message_t::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:message_t.client_id)
}

// required .transaction_t transaction = 3;
inline bool message_t::_internal_has_transaction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transaction_ != nullptr);
  return value;
}
inline bool message_t::has_transaction() const {
  return _internal_has_transaction();
}
inline void message_t::clear_transaction() {
  if (transaction_ != nullptr) transaction_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::transaction_t& message_t::_internal_transaction() const {
  const ::transaction_t* p = transaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transaction_t*>(
      &::_transaction_t_default_instance_);
}
inline const ::transaction_t& message_t::transaction() const {
  // @@protoc_insertion_point(field_get:message_t.transaction)
  return _internal_transaction();
}
inline void message_t::unsafe_arena_set_allocated_transaction(
    ::transaction_t* transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message_t.transaction)
}
inline ::transaction_t* message_t::release_transaction() {
  _has_bits_[0] &= ~0x00000001u;
  ::transaction_t* temp = transaction_;
  transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transaction_t* message_t::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:message_t.transaction)
  _has_bits_[0] &= ~0x00000001u;
  ::transaction_t* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::transaction_t* message_t::_internal_mutable_transaction() {
  _has_bits_[0] |= 0x00000001u;
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::transaction_t>(GetArena());
    transaction_ = p;
  }
  return transaction_;
}
inline ::transaction_t* message_t::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:message_t.transaction)
  return _internal_mutable_transaction();
}
inline void message_t::set_allocated_transaction(::transaction_t* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:message_t.transaction)
}

// -------------------------------------------------------------------

// timestamp_t

// required int64 seconds = 1;
inline bool timestamp_t::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool timestamp_t::has_seconds() const {
  return _internal_has_seconds();
}
inline void timestamp_t::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 timestamp_t::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 timestamp_t::seconds() const {
  // @@protoc_insertion_point(field_get:timestamp_t.seconds)
  return _internal_seconds();
}
inline void timestamp_t::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
}
inline void timestamp_t::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:timestamp_t.seconds)
}

// required int32 nanos = 2;
inline bool timestamp_t::_internal_has_nanos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool timestamp_t::has_nanos() const {
  return _internal_has_nanos();
}
inline void timestamp_t::clear_nanos() {
  nanos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 timestamp_t::_internal_nanos() const {
  return nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 timestamp_t::nanos() const {
  // @@protoc_insertion_point(field_get:timestamp_t.nanos)
  return _internal_nanos();
}
inline void timestamp_t::_internal_set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nanos_ = value;
}
inline void timestamp_t::set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:timestamp_t.nanos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Msg_2eproto
